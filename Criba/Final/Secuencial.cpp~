#include "mpi.h"
#include <time.h> 
#include <stdio.h> 
#include <vector>
#include <omp.h>
#include <math.h> 

using namespace std;
float timing(int);


	int 	Size, 
		maxSize, 
		rootSize,
		id,
		p,	
		ierr;

	bool 	BoolNum[Size];
  	double  wtime;

	Size =48615; //Para sacar 5000 numeros primos




float timing(int iteraciones){
	
	double start, end, time, time_P; 
	 
	for(int a =0; a<iteraciones; a++){

		start = omp_get_wtime();
		criba(BoolNum, Size);
		end = omp_get_wtime();
		
		float time = (end-start);
		time = end-start;
		time_P = time_P + time;
		}

	time_P = time_P/(iteraciones); 
	printf("The time was: %f ms\n", time_P*1000 );
	return time_P;
	
	}


void invalid_Noprime(int n, int id, int p){
	maxSize = Size/n;
        for(int h = 2; h <= maxSize; ++h)
        	m[i*h] = false
}

void criba(bool m[], int Size){

    m[0] = false;
    m[1] = false;
    for(int i = 2; i <= Size; ++i) 
        m[i] = true;

    rootSize = sqrt(Size);

    for(int i = 2; i <= SizeRaiz; ++i) {
        if(m[i]) {
		ierr = MPI_Bcast ( &i, 1, MPI_INT, 0, MPI_COMM_WORLD );
		invalid_Noprime(i,id,p);
 		
        }

	
    }
 
}


int main(void) 
{ 
	int iteraciones=3000;
	ierr = MPI_Init ( &argc, &argv );
  	ierr = MPI_Comm_size ( MPI_COMM_WORLD, &p );
  	ierr = MPI_Comm_rank ( MPI_COMM_WORLD, &id );
	float Time1 = timing(iteraciones);
	ierr = MPI_Finalize ( );


return 0; 
}

